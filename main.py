import platform
from datetime import datetime
import sys
import time
import psutil
import Ui_smartMalwareDetection
from PySide6.QtCore import QCoreApplication
import multiprocessing
import pickle
from PySide6.QtWidgets import QFileDialog
from PySide6.QtCore import (QCoreApplication, Qt)
from playsound import playsound
import string
import os
import array
import time
import math
import pefile
from PySide6.QtCore import QRunnable, Slot, QThreadPool
from PySide6.QtGui import QIcon, QAction
from PySide6.QtWidgets import QSystemTrayIcon, QMenu


ui = Ui_smartMalwareDetection.Ui_MainWindow()
try:
    ignorFiles=[i.strip() for i in open('Ignore.txt','r')]
except Exception as e:
    print(e)
    ignorFiles=[]
try:
    virusChest=set([i.strip() for i in open('virusChest.txt','r')])
except Exception as e:
    print(e)
    virusChest=set()
shared=None;totalThreadShared=None;fileScanedShared=None;dragPos=''
threadpool=QThreadPool()


class Worker(QRunnable):
    def __init__(self,fn,*args, **kwargs):
        super().__init__()
        self.fn = fn
        self.args = args
        self.kwargs = kwargs
    @Slot()
    def run(self):
        self.fn(*self.args,**self.kwargs)


def get_entropy(data):
    '''Information Entropy or Shannon's entropy quantifies the amount of uncertainty (or surprise) involved in the value of a random variable or the outcome of a random process.'''
    try:
        if len(data) == 0:
            return 0.0
        occurences = array.array('L', [0]*256)
        for x in data:
            occurences[x if isinstance(x, int) else ord(x)] += 1
    
        entropy = 0
        for x in occurences:
            if x:
                p_x = float(x) / len(data)
                entropy -= p_x*math.log(p_x, 2)
    
        return entropy
    except:
        return 0.0


def get_resources(pe):
    '''resources are read-only data embedded in portable executable files like EXE, DLL, CPL, SCR, SYS or (beginning with Windows Vista) MUI files'''
    resources = []
    if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE'):
        try:
            for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
                if hasattr(resource_type, 'directory'):
                    for resource_id in resource_type.directory.entries:
                        if hasattr(resource_id, 'directory'):
                            for resource_lang in resource_id.directory.entries:
                                data = pe.get_data(resource_lang.data.struct.OffsetToData, resource_lang.data.struct.Size)
                                size = resource_lang.data.struct.Size
                                entropy = get_entropy(data)
                                resources.append([entropy, size])
        except Exception as e:
            return resources
    return resources


def get_version_info(pe):
    res = []
    try:
        for fileinfo in pe.FileInfo:
                for st in fileinfo[0].StringTable:
                    for entry in st.entries.items():
                        res.append(entry[1])
                for var in fileinfo[1].Var:
                    res.append(var)
        if hasattr(pe, 'VS_FIXEDFILEINFO'):
            res.append(pe.VS_FIXEDFILEINFO[0].FileFlags)
            res.append(pe.VS_FIXEDFILEINFO[0].FileOS)
            res.append(pe.VS_FIXEDFILEINFO[0].FileType)
            res.append(pe.VS_FIXEDFILEINFO[0].FileVersionLS)
            res.append( pe.VS_FIXEDFILEINFO[0].ProductVersionLS)
            res.append(pe.VS_FIXEDFILEINFO[0].Signature)
            res.append( pe.VS_FIXEDFILEINFO[0].StrucVersion)
        return res
    except:
        return res


def classficationQuickScan(extract_features,get_resources,get_entropy,get_version_info,shared,fileScanedShared,totalThreadShared):
    try:
        clf = pickle.load(open('CLF_RandomForest_99.2.sav', 'rb'))
        paths=[]
        desktop = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop') 
        download = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Downloads') 
        for root, dirs, files in os.walk(desktop):
            for file in files:
                if file in ignorFiles:
                    continue
                # if file.endswith(".dll") or file.endswith(".exe"):
                paths.append(os.path.join(root,file))
        for root, dirs, files in os.walk(download):
            for file in files:
                if file in ignorFiles:
                    continue
                # if file.endswith(".dll") or file.endswith(".exe"):
                paths.append(os.path.join(root,file))
        progress=0;totalFiles=len(paths);totalThread=0;totalFileScaned=0
        f=open('QuickScanResults.txt','w+')
        for j,i in enumerate(paths):
            checkExe = open(i,"rb")
            if checkExe.read(2) == b'MZ':
                prediction=clf.predict([extract_features(pefile.PE(i))])
                if prediction[0]==0:
                    prediction='Malware'
                    totalThread+=1
                    totalThreadShared.put(totalThread)
                else:
                    prediction='Clean'
                if prediction=='Malware':
                    f.write(f'{i}\n')
            time.sleep(0.1)
            totalFileScaned+=1
            fileScanedShared.put(totalFileScaned)
            progress=int(((j+1)/totalFiles)*100)
            shared.put(progress)
        f.close()
    except Exception as e:
        print(e)


def classificationCustomScan(extract_features,get_resources,get_entropy,get_version_info,shared,dir):
    try:
        clf = pickle.load(open('CLF_RandomForest_99.2.sav', 'rb'))
        paths=[]
        for root, dirs, files in os.walk(dir):
            for file in files:
                if file in ignorFiles:
                    continue
                paths.append(os.path.join(root,file))
        progress=0;totalFiles=len(paths)
        f=open('CustomScanResults.txt','w+')
        for j,i in enumerate(paths):
            checkExe = open(i,"rb")
            if checkExe.read(2) == b'MZ':
                prediction=clf.predict([extract_features(pefile.PE(i))])
                if prediction[0]==0:
                    prediction='Malware'
                else:
                    prediction='Clean'
                if prediction=='Malware':
                    f.write(f'{i}\n')
            time.sleep(0.1)
            progress=int(((j+1)/totalFiles)*100)
            shared.put(progress)
        f.close()
    except:
        pass
    

def classficationDeepScan(extract_features,get_resources,get_entropy,get_version_info,shared,fileScanedShared,totalThreadShared):
    try:
        clf = pickle.load(open('CLF_RandomForest_99.2.sav', 'rb'))
        paths=[]
        drives = ['%s:' % d for d in string.ascii_uppercase if os.path.exists('%s:' % d)]
        for i in drives[1:]:
            for root, dirs, files in os.walk(f'{i}/'):
                for file in files:
                    if file in ignorFiles:
                        continue
                    paths.append(os.path.join(root,file))
        progress=0;totalFiles=len(paths);totalThread=0;totalFileScaned=0
        print(len(paths))
        f=open('DeepScanResults.txt','w+')
        for j,i in enumerate(paths):
            try:
                checkExe = open(i,"rb")
                if checkExe.read(2) == b'MZ':
                    prediction=clf.predict([extract_features(pefile.PE(i))])
                    if prediction[0]==0:
                        prediction='Malware'
                        totalThread+=1
                        totalThreadShared.put(totalThread)
                    else:
                        prediction='Clean'
                    if prediction=='Malware':
                        f.write(f'{i}\n')
                time.sleep(0.1)
                totalFileScaned+=1
                fileScanedShared.put(totalFileScaned)
                progress=int(((j+1)/totalFiles)*100)
                shared.put(progress)
            except Exception as e:
                print(e)
    except Exception as e:
        print(e)
    f.close()


def extract_features(pe):
    feature_list=[]
    try:
        '''The Machine field has one of the following values, which specify the CPU type. An image file can be run only on the specified machine or on a system that emulates the specified machine.'''
        feature_list.append(int(pe.FILE_HEADER.Machine))
    except:
        feature_list.append(0)
    try:
        '''Every image file has an optional header that provides information to the loader.'''
        feature_list.append(int(pe.FILE_HEADER.SizeOfOptionalHeader))
    except:
        feature_list.append(0)
    try:
        '''The Characteristics field contains flags that indicate attributes of the object or image file. The following flags are currently defined:'''
        feature_list.append(int(pe.FILE_HEADER.Characteristics))
    except:
        feature_list.append(0)
    try:
        '''The first eight fields of the optional header are standard fields that are defined for every implementation of COFF. These fields contain general information that is useful for loading and running an executable file.'''
        feature_list.append(int(pe.OPTIONAL_HEADER.MajorLinkerVersion))
    except:
        feature_list.append(0)
    try:
        feature_list.append(int(pe.OPTIONAL_HEADER.MinorLinkerVersion))
    except:
        feature_list.append(0)
    try:
        '''The size of the code (text) section, or the sum of all code sections if there are multiple sections. '''
        feature_list.append(int(pe.OPTIONAL_HEADER.SizeOfCode))
    except:
        feature_list.append(0)
    try:
        '''The size of the initialized data section, or the sum of all such sections if there are multiple data sections. '''
        feature_list.append(int(pe.OPTIONAL_HEADER.SizeOfInitializedData))
    except:
        feature_list.append(0)
    try:
        '''The size of the uninitialized data section (BSS), or the sum of all such sections if there are multiple BSS sections. '''
        feature_list.append(int(pe.OPTIONAL_HEADER.SizeOfUninitializedData))
    except:
        feature_list.append(0)
    try:
        feature_list.append(int(pe.OPTIONAL_HEADER.AddressOfEntryPoint))
    except:
        feature_list.append(0)
    try:
        '''The address that is relative to the image base of the beginning-of-code section when it is loaded into memory. '''
        feature_list.append(int(pe.OPTIONAL_HEADER.BaseOfCode))
    except:
        feature_list.append(0)
    try:
        '''The address that is relative to the image base of the beginning-of-data section when it is loaded into memory. '''
        feature_list.append(int(pe.OPTIONAL_HEADER.BaseOfData))
    except:
        feature_list.append(0)
    try:
        '''The preferred address of the first byte of image when loaded into memory; must be a multiple of 64 K. The default for DLLs is 0x10000000. The default for Windows CE EXEs is 0x00010000. The default for Windows NT, Windows 2000, Windows XP, Windows 95, Windows 98, and Windows Me is 0x00400000. '''    
        feature_list.append(int(pe.OPTIONAL_HEADER.ImageBase))
    except:
        feature_list.append(0)
    try:
        '''The alignment (in bytes) of sections when they are loaded into memory. It must be greater than or equal to FileAlignment. The default is the page size for the architecture. '''
        feature_list.append(int(pe.OPTIONAL_HEADER.SectionAlignment))
    except:
        feature_list.append(0)
    try:
        '''The alignment factor (in bytes) that is used to align the raw data of sections in the image file. The value should be a power of 2 between 512 and 64 K, inclusive. The default is 512. If the SectionAlignment is less than the architecture's page size, then FileAlignment must match '''
        feature_list.append(int(pe.OPTIONAL_HEADER.FileAlignment))
    except:
        feature_list.append(0)
    try:
        '''The major version number of the required operating system. '''
        feature_list.append(int(pe.OPTIONAL_HEADER.MajorOperatingSystemVersion))
    except:
        feature_list.append(0)
    try:
        '''The minor version number of the required operating system. '''
        feature_list.append(int(pe.OPTIONAL_HEADER.MinorOperatingSystemVersion))
    except:
        feature_list.append(0)
    try:
        '''The major version number of the image. '''
        feature_list.append(int(pe.OPTIONAL_HEADER.MajorImageVersion))
    except:
        feature_list.append(0)
    try:
        '''The minor version number of the image.'''
        feature_list.append(int(pe.OPTIONAL_HEADER.MinorImageVersion))
    except:
        feature_list.append(0)
    try:
        feature_list.append(int(pe.OPTIONAL_HEADER.MajorSubsystemVersion))
    except:
        feature_list.append(0)
    try:
        feature_list.append(int(pe.OPTIONAL_HEADER.MinorSubsystemVersion))
    except:
        feature_list.append(0)
    try:
        '''The size (in bytes) of the image, including all headers, as the image is loaded in memory. It must be a multiple of SectionAlignment.'''
        feature_list.append(int(pe.OPTIONAL_HEADER.SizeOfImage))
    except:
        feature_list.append(0)
    try:
        """The combined size of an MS-DOS stub, PE header, and section headers rounded up to a multiple of FileAlignment. """
        feature_list.append(int(pe.OPTIONAL_HEADER.SizeOfHeaders))
    except:
        feature_list.append(0)
    try:
        '''The image file checksum. The algorithm for computing the checksum is incorporated into IMAGHELP.DLL. The following are checked for validation at load time: all drivers, any DLL loaded at boot time, and any DLL that is loaded into a critical Windows process. '''
        feature_list.append(int(pe.OPTIONAL_HEADER.CheckSum))
    except:
        feature_list.append(0)
    try:
        '''The subsystem that is required to run this image. For more information'''
        feature_list.append(int(pe.OPTIONAL_HEADER.Subsystem))
    except:
        feature_list.append(0)
    try:
        '''Dynamic Link Liberary Characterstcis'''
        feature_list.append(int(pe.OPTIONAL_HEADER.DllCharacteristics))
    except:
        feature_list.append(0)
    try:
        feature_list.append(int(pe.OPTIONAL_HEADER.SizeOfStackReserve))
    except:
        feature_list.append(0)
    try:
        '''The size of the stack to commit. '''
        feature_list.append(int(pe.OPTIONAL_HEADER.SizeOfStackCommit))
    except:
        feature_list.append(0)
    try:
        '''The size of the local heap space to reserve. Only SizeOfHeapCommit is committed; the rest is made available one page at a time until the reserve size is reached. '''
        feature_list.append(int(pe.OPTIONAL_HEADER.SizeOfHeapReserve))
    except:
        feature_list.append(0)
    try:
        '''The size of the local heap space to commit. '''
        feature_list.append(int(pe.OPTIONAL_HEADER.SizeOfHeapCommit))
    except:
        feature_list.append(0)
    try:
        '''Reserved, must be zero. '''
        feature_list.append(int(pe.OPTIONAL_HEADER.LoaderFlags))
    except:
        feature_list.append(0)
    try:
        '''The number of data-directory entries in the remainder of the optional header. Each describes a location and size. '''
        feature_list.append(int(pe.OPTIONAL_HEADER.NumberOfRvaAndSizes))
    except:
        feature_list.append(0)
    try:
        '''The number of entries in the section table is given by the NumberOfSections field in the file header'''
        feature_list.append(int(pe.FILE_HEADER.NumberOfSections))
    except:
        feature_list.append(0)
    sectionEntropies=[]
    sectionRawDataSize=[]
    sectionVirtualSize=[]
    for section in pe.sections:
        try:
            sectionEntropies.append(section.get_entropy())
        except:
            pass
        try:
            sectionRawDataSize.append(section.SizeOfRawData)
        except:
            pass
        try:
            sectionVirtualSize.append(section.Misc_VirtualSize)
        except:
            pass
    try:
        feature_list.append(round(float(sum(sectionEntropies)/len(sectionEntropies)),11))
    except:
        feature_list.append(0)
    try:
        feature_list.append(round(min(sectionEntropies),12))
    except:
        feature_list.append(0)
    try:
        feature_list.append(round(max(sectionEntropies),11))
    except:
        feature_list.append(0)
    try:
        feature_list.append(round(float(sum(sectionRawDataSize)/len(sectionRawDataSize)),11))
    except:
        feature_list.append(0)
    try:
        feature_list.append(round(min(sectionRawDataSize),12))
    except:
        feature_list.append(0)
    try:
        feature_list.append(round(max(sectionRawDataSize),12))
    except:
        feature_list.append(0)
    try:
        feature_list.append(round(float(sum(sectionVirtualSize)/len(sectionVirtualSize)),11))
    except:
        feature_list.append(0)
    try:
        feature_list.append(round(min(sectionVirtualSize),12))
    except:
        feature_list.append(0)
    try:
        feature_list.append(round(max(sectionVirtualSize),12))
    except:
        feature_list.append(0)
    importedDLLs=[]
    try:
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            importedDLLs.append(entry.dll.decode('utf-8'))
    except:
        pass
    try:
        feature_list.append(len(importedDLLs))
    except:
        feature_list.append(0)
    numberOfImports=[]
    try:
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            dll_name = entry.dll.decode('utf-8')
            for func in entry.imports:
                numberOfImports.append(func)
    except:
        pass
    try:
        feature_list.append(len(numberOfImports))
    except:
        feature_list.append(0)
    callByOrdinal=[]
    try:
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            for imp in entry.imports:
                if imp.ordinal != None:
                    callByOrdinal.append(imp.ordinal)
    except:
        pass
    
    try:
        feature_list.append(len(callByOrdinal))
    except:
        feature_list.append(0)
    try:
        pe.parse_data_directories(directories=[pefile.DIRECTORY_ENTRY["IMAGE_DIRECTORY_ENTRY_EXPORT"]])
        NumbeOfexports = [(e.ordinal, e.name) for e in pe.DIRECTORY_ENTRY_EXPORT.symbols][0][0]
        feature_list.append(NumbeOfexports)
    except:
        feature_list.append(0)
    numberOfResouces=[]
    try:
        for rsrc in pe.DIRECTORY_ENTRY_RESOURCE.entries:
            for i in rsrc.directory.entries:
                numberOfResouces.append(i)
    except:
        pass
    try:
        feature_list.append(len(numberOfResouces))
    except:
        feature_list.append(0)

    res={}
    resources= get_resources(pe)
    if len(resources)> 0:
        entropy = list(map(lambda x:x[0], resources))
        res['ResourcesMeanEntropy'] = sum(entropy)/float(len(entropy))
        res['ResourcesMinEntropy'] = min(entropy)
        res['ResourcesMaxEntropy'] = max(entropy)
        sizes = list(map(lambda x:x[1], resources))
        res['ResourcesMeanSize'] = sum(sizes)/float(len(sizes))
        res['ResourcesMinSize'] = min(sizes)
        res['ResourcesMaxSize'] = max(sizes)
    else:
        res['ResourcesMeanEntropy'] = 0
        res['ResourcesMinEntropy'] = 0
        res['ResourcesMaxEntropy'] = 0
        res['ResourcesMeanSize'] = 0
        res['ResourcesMinSize'] = 0
        res['ResourcesMaxSize'] = 0
    for i in res.values():
        feature_list.append(round(i,11))
    try:
        LoadConfigureationsize=pe.DIRECTORY_ENTRY_LOAD_CONFIG.struct.Size
        feature_list.append(LoadConfigureationsize)
    except:
        feature_list.append(0)
    try:
        versionInformationSize=len(get_version_info(pe))
        feature_list.append(versionInformationSize)
    except:
        feature_list.append(0)
    return feature_list


def quickScanprogressBarValue(value):
        if value<=100:
            global ui
            # PROGRESSBAR STYLESHEET BASE
            styleSheet = """
            QFrame{border-radius:80px;
            background: qconicalgradient(cx:0.5, cy:0.5, angle:90, stop:{STOP_1} rgba(0, 0, 0, 0), stop:{STOP_2} rgba(76, 110, 245,255));
            }
            """
            # GET PROGRESS BAR VALUE, CONVERT TO FLOAT AND INVERT VALUES
            # stop works of 1.000 to 0.000
            progress = (100 - value) / 100.0

            # GET NEW VALUES
            stop_1 = str(progress - 0.001)
            stop_2 = str(progress)
            # FIX MAX VALUE
            if value == 100:
                stop_1 = "1.000"
                stop_2 = "1.000"
            # SET VALUES TO NEW STYLESHEET
            newStylesheet = styleSheet.replace("{STOP_1}", stop_1).replace("{STOP_2}", stop_2)
            ui.quickScanprogressBarFrame.setStyleSheet(newStylesheet)
            textInProgressBar='''<html><head/><body><p><span style=\" font-size:24pt;\">{value}</span><span style=\" font-size:24pt; vertical-align:super;\">%</span></p></body></html>'''
            newTextInProgressBar=textInProgressBar.replace("{value}",str(value))
            ui.quickScanprogressBarLbl.setText(QCoreApplication.translate("MainWindow", newTextInProgressBar, None))
        else:
            pass


def customScanProgressBarValue(value):
    if value<=100:
        global ui
        # PROGRESSBAR STYLESHEET BASE
        styleSheet = """
        QFrame{border-radius:80px;
        background: qconicalgradient(cx:0.5, cy:0.5, angle:90, stop:{STOP_1} rgba(0, 0, 0, 0), stop:{STOP_2} rgba(76, 110, 245,255));
        }
        """
        # GET PROGRESS BAR VALUE, CONVERT TO FLOAT AND INVERT VALUES
        # stop works of 1.000 to 0.000
        progress = (100 - value) / 100.0

        # GET NEW VALUES
        stop_1 = str(progress - 0.001)
        stop_2 = str(progress)
        # FIX MAX VALUE
        if value == 100:
            stop_1 = "1.000"
            stop_2 = "1.000"
        # SET VALUES TO NEW STYLESHEET
        newStylesheet = styleSheet.replace("{STOP_1}", stop_1).replace("{STOP_2}", stop_2)
        ui.customScanprogressBarFrame.setStyleSheet(newStylesheet)
        textInProgressBar='''<html><head/><body><p><span style=\" font-size:24pt;\">{value}</span><span style=\" font-size:24pt; vertical-align:super;\">%</span></p></body></html>'''
        newTextInProgressBar=textInProgressBar.replace("{value}",str(value))
        ui.customScanprogressBarLbl.setText(QCoreApplication.translate("MainWindow", newTextInProgressBar, None))
    else:
        pass


def deepScanProgressBarValue(value):
    if value<=100:
        global ui
        # PROGRESSBAR STYLESHEET BASE
        styleSheet = """
        QFrame{border-radius:80px;
        background: qconicalgradient(cx:0.5, cy:0.5, angle:90, stop:{STOP_1} rgba(0, 0, 0, 0), stop:{STOP_2} rgba(76, 110, 245,255));
        }
        """
        # GET PROGRESS BAR VALUE, CONVERT TO FLOAT AND INVERT VALUES
        # stop works of 1.000 to 0.000
        progress = (100 - value) / 100.0

        # GET NEW VALUES
        stop_1 = str(progress - 0.001)
        stop_2 = str(progress)
        # FIX MAX VALUE
        if value == 100:
            stop_1 = "1.000"
            stop_2 = "1.000"
        # SET VALUES TO NEW STYLESHEET
        newStylesheet = styleSheet.replace("{STOP_1}", stop_1).replace("{STOP_2}", stop_2)
        ui.deepScanprogressBarFrame.setStyleSheet(newStylesheet)
        textInProgressBar='''<html><head/><body><p><span style=\" font-size:24pt;\">{value}</span><span style=\" font-size:24pt; vertical-align:super;\">%</span></p></body></html>'''
        newTextInProgressBar=textInProgressBar.replace("{value}",str(value))
        ui.deepScanprogressBarLbl.setText(QCoreApplication.translate("MainWindow", newTextInProgressBar, None))
    else:
        pass
    

def onStartQuickScan():
    try:
        global shared,totalThreadShared,fileScanedShared
        ui.startQuickScanBtn.hide()
        ui.cancelQuickScanBtn.show()
        ui.quickScanTotalFileLbl.show()
        ui.quickScanThreadFoundLbl.show()
        shared = multiprocessing.Queue()
        fileScanedShared = multiprocessing.Queue()
        totalThreadShared = multiprocessing.Queue()
        p1 = multiprocessing.Process(target=classficationQuickScan, args=(extract_features,get_resources,get_entropy,get_version_info,shared,fileScanedShared,totalThreadShared))
        p1.start()
        def runShared():
            global shared
            while True:
                while not shared.empty():
                    progressValue=[10]
                    progressValue[0]=shared.get()
                    if progressValue[0]==100:
                        quickScanprogressBarValue(progressValue[0])
                        quickScanprogressBarValue(progressValue[0])
                        ui.quickScanPageopenVirusChestBtn.show()
                        ui.cancelQuickScanBtn.hide()
                        playsound('scanCompleteSound.mp3')
                        f = open("QuickScanResults.txt", "r")
                        results=f.readlines()
                        f1=open('virusChest.txt','a+')
                        for i in results:
                            # ui.virusChestResult.addItem(i.strip())
                            if i in virusChest:
                                pass
                            else:
                                f1.write(f"{i}")
                        f1.close()
                        return
                    else:
                        quickScanprogressBarValue(progressValue[0])
                while not totalThreadShared.empty():
                    # time.sleep(0.5)
                    ui.quickScanThreadFoundLbl.setText(str(totalThreadShared.get())+ui.quickScanThreadFoundLbl.text()[-13:])
                    ui.quickScanThreadFoundLbl.setStyleSheet(u"border: 2px solid red;\n"\
    "border-radius:90px;")
                while not fileScanedShared.empty():
                    ui.quickScanTotalFileLbl.setText(str(fileScanedShared.get())+ui.quickScanTotalFileLbl.text()[-13:])
                    ui.quickScanTotalFileLbl.setStyleSheet(u"border: 2px solid #4C6EF5;\n"\
    "border-radius:90px;")
        # def runLoading():
        #     while True:
        #         if len(ui.quickScanWaitLbl.text())==50:
        #             ui.quickScanWaitLbl.setText('')
                # ui.quickScanWaitLbl.setText(ui.quickScanWaitLbl.text()+("."*2))
                
                
        obj=Worker(runShared)
        threadpool.start(obj)
        # obj1=Worker(runLoading)
        # threadpool.start(obj1)
    except Exception as e:
        print(e)


def onStartDeepScan():
    try:
        global shared,totalThreadShared,fileScanedShared
        ui.startDeepScanBtn.hide()
        ui.cancelDeepScanBtn.show()
        ui.deepScanTotalFileLbl.show()
        ui.deepScanThreadFoundLbl.show()
        shared = multiprocessing.Queue()
        fileScanedShared = multiprocessing.Queue()
        totalThreadShared = multiprocessing.Queue()
        p1 = multiprocessing.Process(target=classficationDeepScan, args=(extract_features,get_resources,get_entropy,get_version_info,shared,fileScanedShared,totalThreadShared))
        p1.start()
        def runShared():
            global shared
            while True:
                while not shared.empty():
                    progressValue=[10]
                    progressValue[0]=shared.get()
                    if progressValue[0]==100:
                        deepScanProgressBarValue(progressValue[0])
                        deepScanProgressBarValue(progressValue[0])
                        ui.deepScanPageopenVirusChestBtn.show()
                        ui.cancelDeepScanBtn.hide()
                        playsound('scanCompleteSound.mp3')
                        f = open("DeepScanResults.txt", "r")
                        results=f.readlines()
                        f1=open('virusChest.txt','a+')
                        for i in results:
                            # ui.virusChestResult.addItem(i.strip())
                            if i in virusChest:
                                pass
                            else:
                                f1.write(f"{i}")
                        f.close()
                        return
                    else:
                        deepScanProgressBarValue(progressValue[0])
                while not totalThreadShared.empty():
                    ui.deepScanThreadFoundLbl.setText(str(totalThreadShared.get())+ui.deepScanThreadFoundLbl.text()[-13:])
                    ui.deepScanThreadFoundLbl.setStyleSheet(u"border: 2px solid red;\n"
    "border-radius:90px;")
                while not fileScanedShared.empty():
                    ui.deepScanTotalFileLbl.setText(str(fileScanedShared.get())+ui.deepScanTotalFileLbl.text()[-13:])
                    ui.deepScanTotalFileLbl.setStyleSheet(u"border: 2px solid #4C6EF5;\n"\
    "border-radius:90px;")
        obj=Worker(runShared)
        threadpool.start(obj)
    except Exception as e:
        print(e)


def onCustomStartBtn():
    try:
        global shared
        if ui.customScanLineEdit.text()=='':
            return
        dir=ui.customScanLineEdit.text()
        ui.startCustomScanBtn.hide()
        ui.cancelCustomScanBtn.show()
        shared = multiprocessing.Queue()
        p1 = multiprocessing.Process(target=classificationCustomScan, args=(extract_features,get_resources,get_entropy,get_version_info,shared,dir))
        p1.start()
        def runShared():
            global shared
            while True:
                while not shared.empty():
                    progressValue=[10]
                    progressValue[0]=shared.get()
                    if progressValue[0]==100:
                        customScanProgressBarValue(progressValue[0])
                        customScanProgressBarValue(progressValue[0])
                        ui.customScanPageopenVirusChestBtn.show()
                        ui.cancelCustomScanBtn.hide()
                        playsound('scanCompleteSound.mp3')
                        f = open("CustomScanResults.txt", "r")
                        results=f.readlines()
                        f1=open('virusChest.txt','a+')
                        for i in results:
                            # ui.virusChestResult.addItem(i.strip())
                            if i in virusChest:
                                pass
                            else:
                                f1.write(f"{i}")
                        f1.close()
                        return
                    else:
                        customScanProgressBarValue(progressValue[0])
        obj=Worker(runShared)
        threadpool.start(obj)
    except:
        pass


def onQuickScanCancel():
    try:
        ui.quickScanTotalFileLbl.hide()
        ui.quickScanThreadFoundLbl.hide()
        ui.cancelQuickScanBtn.hide()
        ui.startQuickScanBtn.show()
        quickScanprogressBarValue(0)
        pid=os.getpid()
        parent = psutil.Process(pid)
        for child in parent.children(recursive=True):
            print( "child", child)
            child.kill()
    except:
        pass


def onCustomScanCancel():
    try:
        ui.cancelCustomScanBtn.hide()
        ui.startCustomScanBtn.show()
        customScanProgressBarValue(0)
        pid=os.getpid()
        parent = psutil.Process(pid)
        for child in parent.children(recursive=True):
            print( "child", child)
            child.kill()    
    except:
        pass


def onOpenVirusChestBtn():
    try:
        items = [ui.virusChestResult.item(x).text() for x in range(ui.virusChestResult.count())]
        try:
            virusChest=set([i.strip() for i in open('virusChest.txt','r')])
        except:
            virusChest=set()
        for i in virusChest:
            if i in items:
                pass
            else:
                ui.virusChestResult.addItem(i.strip())
        ui.quickScanTotalFileLbl.hide()
        ui.quickScanThreadFoundLbl.hide()
        ui.quickScanPageopenVirusChestBtn.hide()
        ui.cancelQuickScanBtn.hide()
        ui.startQuickScanBtn.show()
        quickScanprogressBarValue(0)
        ui.stackedWidget.setCurrentIndex(4)
        ui.virusChestResult.selectAll()
    except Exception as e:
        print(e)


def killtree(parentKill=True):
    try:
        pid=os.getpid()
        parent = psutil.Process(pid)
        for child in parent.children(recursive=True):
            print( "child", child)
            child.kill()
        if parentKill:
            parent.kill()
    except:
        pass


def onCancel():
    tray.setVisible(False)
    pid=os.getpid()
    parent = psutil.Process(pid)
    for child in parent.children(recursive=True):
        print( "child", child)
        child.kill()
    parent.kill()


def onVirusChestActionApplyBtn():
    try:
        global virusChest,ignoreFile
        if ui.virusChestActionComboBox.currentText()==' Delete':
            selectedItems=ui.virusChestResult.selectedItems()
            for file in selectedItems:
                if os.path.exists(file.text()):
                    locationToSplit=file.text()[::-1].find('\\')
                    f=file.text()[::-1][:locationToSplit][::-1]
                    for proc in psutil.process_iter():
                        if proc.name() == f:
                            proc.kill()
                    os.remove(file.text())
            for file in selectedItems:
                ui.virusChestResult.takeItem(ui.virusChestResult.row(file))
            items = [ui.virusChestResult.item(x).text() for x in range(ui.virusChestResult.count())]
            f = open('virusChest.txt','w+')
            for i in items:
                f.write(f'{i}\n')
            f.close()
        elif ui.virusChestActionComboBox.currentText()==' Quarantine':
            f=open('qurantine.txt','a+')
            selectedItems=ui.virusChestResult.selectedItems()
            for i in selectedItems:
                qurantineFile=i.text()
                pe = pefile.PE(f"{qurantineFile}")
                f.write(f'{qurantineFile},{pe.sections[0].Misc}\n')
                pe.sections[0].Misc = 0x1EEC8987
                locationToSplit=qurantineFile[::-1].find('\\')
                fileName=qurantineFile[::-1][:locationToSplit][::-1]
                filePath = qurantineFile[::-1][locationToSplit+1:][::-1]
                newFile = filePath+'\\'+fileName[:-4]+'_M'+fileName[-4:]
                pe.write(newFile)
                pe.close()
                if os.path.exists(qurantineFile):
                    for proc in psutil.process_iter():
                        if proc.name() == fileName:
                            proc.kill()
                    os.remove(qurantineFile)
            f.close()
            items = [ui.virusChestResult.item(x).text() for x in range(ui.virusChestResult.count())]
            f = open('virusChest.txt','w+')
            for i in items:
                f.write(f'{i}\n')
            f.close()
        elif ui.virusChestActionComboBox.currentText()==' Ignore':
            f=open('Ignore.txt','a+')
            selectedItems=ui.virusChestResult.selectedItems()
            for i in selectedItems:
                locationToSplit=i.text()[::-1].find('\\')
                ignoreFile=i.text()[::-1][:locationToSplit][::-1]
                f.write(f'{ignoreFile}\n')
            for file in selectedItems:
                ui.virusChestResult.takeItem(ui.virusChestResult.row(file))
            f.close()
            items = [ui.virusChestResult.item(x).text() for x in range(ui.virusChestResult.count())]
            f = open('virusChest.txt','w+')
            for i in items:
                f.write(f'{i}\n')
            f.close()
    except Exception as e:
        print(e)


def onCustomScanChoseFolder():
    try:
        folderPath = QFileDialog.getExistingDirectory()
        ui.customScanLineEdit.setText(folderPath)
    except:
        pass


def onCustomScanVirusChestBtn():
    try:
        items = [ui.virusChestResult.item(x).text() for x in range(ui.virusChestResult.count())]
        try:
            virusChest=set([i.strip() for i in open('virusChest.txt','r')])
        except Exception as e:
            print(e)
            virusChest=set()
        for i in virusChest:
            if i in items:
                pass
            else:
                ui.virusChestResult.addItem(i.strip())
        customScanProgressBarValue(0)
        ui.customScanPageopenVirusChestBtn.hide()
        ui.cancelCustomScanBtn.hide()
        ui.startCustomScanBtn.show()
        ui.stackedWidget.setCurrentIndex(4)
    except Exception as e:
        print(e)


def onDeepScanVirusChestBtn():
    try:
        items = [ui.virusChestResult.item(x).text() for x in range(ui.virusChestResult.count())]
        try:
            virusChest=set([i.strip() for i in open('virusChest.txt','r')])
        except:
            virusChest=set()
        for i in virusChest:
            if i in items:
                pass
            else:
                ui.virusChestResult.addItem(i.strip())
        ui.deepScanTotalFileLbl.hide()
        ui.deepScanThreadFoundLbl.hide()
        ui.deepScanPageopenVirusChestBtn.hide()
        ui.cancelDeepScanBtn.hide()
        ui.startDeepScanBtn.show()
        # deepScanProgressBarValue
        deepScanProgressBarValue(0)
        ui.stackedWidget.setCurrentIndex(4)
        ui.virusChestResult.selectAll()
    except Exception as e:
        print(e)


def onDeepScanCancle():
    try:
        ui.deepScanTotalFileLbl.hide()
        ui.deepScanThreadFoundLbl.hide()
        ui.cancelDeepScanBtn.hide()
        ui.startDeepScanBtn.show()
        deepScanProgressBarValue(0)
        pid=os.getpid()
        parent = psutil.Process(pid)
        for child in parent.children(recursive=True):
            # print( "child", child)
            child.kill()
    except Exception as e:
        print(e)


def dragPostion(event):
    try:
        global dragPos
        dragPos = event. globalPosition() .toPoint()
    except:
        pass


def moveWindow(event):
    try:
        global dragPos
        # IF LEFT CLICK MOVE WINDOW
        if event.buttons() == Qt.LeftButton:
            MainWindow.move(MainWindow.pos() + event. globalPosition() .toPoint() - dragPos)
            dragPos = event. globalPosition() .toPoint()
            event.accept()
    except:
        pass


def __icon_activated(reason):
    try:
        if reason in (QSystemTrayIcon.Trigger, QSystemTrayIcon.DoubleClick):
            MainWindow.showNormal()
    except:
        pass


def onSystemTrayBtn():
    MainWindow.hide()


def get_size(bytes, suffix="B"):
    """
    Convert Large Bytes into Kilo, Mega, Giga
    Scale bytes to its proper format
    e.g:
        1253656 => '1.20MB'
        1253656678 => '1.17GB'
    """
    factor = 1024
    for unit in ["", "K", "M", "G", "T", "P"]:
        if bytes < factor:
            return f"{bytes:.2f}{unit}{suffix}"
        bytes /= factor

def getSystemInfo():
    uname = platform.uname()
    ui.statusSystemInfo.addItem(f"\nSystem: {platform.system()} {platform.release()}")
    ui.statusSystemInfo.addItem(f"Node Name: {uname.node}")
    ui.statusSystemInfo.addItem(f"Release: {uname.release}")
    ui.statusSystemInfo.addItem(f"Version: {uname.version}")
    ui.statusSystemInfo.addItem(f"Machine: {uname.machine}")
    ui.statusSystemInfo.addItem(f"Processor: {uname.processor}")
    boot_time_timestamp = psutil.boot_time()
    bt = datetime.fromtimestamp(boot_time_timestamp)
    ui.statusSystemInfo.addItem(f"Boot Time: {bt.year}/{bt.month}/{bt.day} {bt.hour}:{bt.minute}:{bt.second}")

def getCPUInfo():
    def runShared():
        if ui.statusTabWidget.currentIndex()!= 1:
            return
        while True:
            print('cup called')
            ui.statusProcessorInfo.clear()
            # number of cores
            ui.statusProcessorInfo.addItem(f"\nPhysical cores: {psutil.cpu_count(logical=False)}")
            ui.statusProcessorInfo.addItem(f"Total cores: {psutil.cpu_count(logical=True)}")
            # CPU frequencies
            cpufreq = psutil.cpu_freq()
            ui.statusProcessorInfo.addItem(f"Max Frequency: {cpufreq.max:.2f}Mhz")
            ui.statusProcessorInfo.addItem(f"Min Frequency: {cpufreq.min:.2f}Mhz")
            ui.statusProcessorInfo.addItem(f"Current Frequency: {cpufreq.current:.2f}Mhz")
            # CPU usage
            # ui.statusProcessorInfo.addItem("CPU Usage Per Core:")
            # for i, percentage in enumerate(psutil.cpu_percent(percpu=True, interval=1)):
            #     ui.statusProcessorInfo.addItem(f"Core {i}: {percentage}%")
            ui.statusProcessorInfo.addItem(f"Total CPU Usage: {psutil.cpu_percent()}%")
            time.sleep(2)
    obj=Worker(runShared)
    threadpool.start(obj)


def getRamInfo():
    if ui.statusTabWidget.currentIndex()!= 2:
            return
    def runShared():
        while True:
            print('ram called')
            ui.statusRamInfo.clear()
            # get the memory details
            svmem = psutil.virtual_memory()
            ui.statusRamInfo.addItem(f"\nTotal: {get_size(svmem.total)}")
            ui.statusRamInfo.addItem(f"Available: {get_size(svmem.available)}")
            ui.statusRamInfo.addItem(f"Used: {get_size(svmem.used)}")
            ui.statusRamInfo.addItem(f"Percentage: {svmem.percent}%")
            time.sleep(2)
    obj=Worker(runShared)
    threadpool.start(obj)


def getDiskInfo():
    # get all disk partitions
    partitions = psutil.disk_partitions()
    for partition in partitions:
        ui.statusDiskInfo.addItem(f"=============================== Device: {partition.device} ==============================")
        ui.statusDiskInfo.addItem(f"File system type: {partition.fstype}")
        try:
            partition_usage = psutil.disk_usage(partition.mountpoint)
        except PermissionError:
            # this can be catched due to the disk that
            # isn't ready
            continue
        ui.statusDiskInfo.addItem(f"  Total Size: {get_size(partition_usage.total)}")
        ui.statusDiskInfo.addItem(f"  Used: {get_size(partition_usage.used)}")
        ui.statusDiskInfo.addItem(f"  Free: {get_size(partition_usage.free)}")
        ui.statusDiskInfo.addItem(f"  Percentage: {partition_usage.percent}%")

def getNetworkInfo():
    # Network information
    # get all network interfaces (virtual and physical)
    if_addrs = psutil.net_if_addrs()
    for interface_name, interface_addresses in if_addrs.items():
        ui.statusNetworkInfo.addItem(f"\n================== Interface: {interface_name} ===================")
        for address in interface_addresses:
            if str(address.family) == 'AddressFamily.AF_INET':
                ui.statusNetworkInfo.addItem(f"  IP Address: {address.address}")
                ui.statusNetworkInfo.addItem(f"  Netmask: {address.netmask}")
                ui.statusNetworkInfo.addItem(f"  Broadcast IP: {address.broadcast}")
            elif str(address.family) == 'AddressFamily.AF_PACKET':
                ui.statusNetworkInfo.addItem(f"  MAC Address: {address.address}")
                ui.statusNetworkInfo.addItem(f"  Netmask: {address.netmask}")
                ui.statusNetworkInfo.addItem(f"  Broadcast MAC: {address.broadcast}")
    # get IO statistics since boot
    net_io = psutil.net_io_counters()
    ui.statusNetworkInfo.addItem(f"\n======================= Total Send and Recieve =======================")
    ui.statusNetworkInfo.addItem(f"Total Bytes Sent: {get_size(net_io.bytes_sent)}")
    ui.statusNetworkInfo.addItem(f"Total Bytes Received: {get_size(net_io.bytes_recv)}")
if __name__ == '__main__':
    multiprocessing.freeze_support()
    app = Ui_smartMalwareDetection.QApplication(sys.argv)
    MainWindow = Ui_smartMalwareDetection.QWidget()
    MainWindow.setWindowFlags(Qt.WindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint))
    ui.setupUi(MainWindow)


    for i in virusChest:
        ui.virusChestResult.addItem(i.strip())
    ui.cancelBtn.clicked.connect(onCancel)
    MainWindow.mouseMoveEvent = moveWindow
    MainWindow.mousePressEvent = dragPostion
    ui.titleMinimizeBtn.clicked.connect(lambda: MainWindow.showMinimized())
    ui.stackedWidget.setCurrentIndex(0)
    

    # Status Signal and Slots
    ui.statusBtn.clicked.connect(lambda: ui.stackedWidget.setCurrentIndex(0))
    getSystemInfo()
    ui.statusTabWidget.currentChanged.connect(getCPUInfo)
    ui.statusTabWidget.currentChanged.connect(getRamInfo)
    getNetworkInfo()
    getDiskInfo()
    

    # Quick Scan Signal and Slots
    quickScanprogressBarValue(0)
    ui.quickScanTotalFileLbl.hide()
    ui.quickScanThreadFoundLbl.hide()
    ui.cancelQuickScanBtn.hide()
    ui.quickScanPageopenVirusChestBtn.hide()
    ui.quickScanBtn.clicked.connect(lambda: ui.stackedWidget.setCurrentIndex(2))
    ui.startQuickScanBtn.clicked.connect(onStartQuickScan)
    ui.cancelQuickScanBtn.clicked.connect(onQuickScanCancel)
    ui.quickScanPageopenVirusChestBtn.clicked.connect(onOpenVirusChestBtn)    


    # Custom Scan Signals
    ui.cancelCustomScanBtn.hide()
    ui.customScanPageopenVirusChestBtn.hide()
    customScanProgressBarValue(0)
    ui.customScanBtn.clicked.connect(lambda: ui.stackedWidget.setCurrentIndex(3))
    ui.customScanOpenFolderBtn.clicked.connect(onCustomScanChoseFolder)
    ui.startCustomScanBtn.clicked.connect(onCustomStartBtn)
    ui.customScanPageopenVirusChestBtn.clicked.connect(onCustomScanVirusChestBtn)
    ui.cancelCustomScanBtn.clicked.connect(onCustomScanCancel)


    # Deep Scan Signals and Slots
    ui.deepScanBtn.clicked.connect(lambda: ui.stackedWidget.setCurrentIndex(1))
    ui.deepScanThreadFoundLbl.hide()
    ui.deepScanTotalFileLbl.hide()
    ui.deepScanPageopenVirusChestBtn.hide()
    ui.deepScanPageopenVirusChestBtn.clicked.connect(onDeepScanVirusChestBtn)
    ui.cancelDeepScanBtn.hide()
    deepScanProgressBarValue(0)
    ui.startDeepScanBtn.clicked.connect(onStartDeepScan)
    ui.cancelDeepScanBtn.clicked.connect(onDeepScanCancle)


    # Virus Chest Signal and Slots
    ui.virusChestBtn.clicked.connect(lambda: ui.stackedWidget.setCurrentIndex(4))
    ui.virusChestActionApplyBtn.clicked.connect(onVirusChestActionApplyBtn)


    # System Tray Icon
    tray = QSystemTrayIcon()
    icon = QIcon("icon.png")
    tray.setIcon(icon)
    tray.setVisible(True)


    # Create the menu
    menu = QMenu()
    action = QAction("A menu item")
    menu.addAction(action)
    quit = QAction("Quit")
    quit.triggered.connect(app.quit)
    menu.addAction(quit)
    tray.setContextMenu(menu)
    tray.activated.connect(__icon_activated)
    ui.systemTrayBtn.clicked.connect(onSystemTrayBtn)


    app.lastWindowClosed.connect(killtree)
    MainWindow.show()
    sys.exit(app.exec())